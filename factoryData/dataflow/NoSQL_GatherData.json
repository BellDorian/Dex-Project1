{
	"name": "NoSQL_GatherData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ProductsJSON",
						"type": "DatasetReference"
					},
					"name": "RawProducts"
				},
				{
					"dataset": {
						"referenceName": "ChatRecords",
						"type": "DatasetReference"
					},
					"name": "RawInteractions"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Products",
						"type": "DatasetReference"
					},
					"name": "ToProducts"
				},
				{
					"dataset": {
						"referenceName": "Messages",
						"type": "DatasetReference"
					},
					"name": "ToMessages"
				},
				{
					"dataset": {
						"referenceName": "Conversations",
						"type": "DatasetReference"
					},
					"name": "ToConversations"
				},
				{
					"dataset": {
						"referenceName": "SupportMessages",
						"type": "DatasetReference"
					},
					"name": "ToSupportMessages",
					"description": "Export Data to SupportMessages"
				}
			],
			"transformations": [
				{
					"name": "CastPriceDecimal"
				},
				{
					"name": "MakeSentByCustomerCol",
					"description": "Create the SentByCustomer column"
				},
				{
					"name": "SelectForSupportMessagesTable",
					"description": "Made all nested properties columns"
				},
				{
					"name": "CastAsIntegerID",
					"description": "Ensure that the new column is a bit"
				},
				{
					"name": "ExcludeNullAgents"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ProductID as integer,",
				"          ProductName as string,",
				"          Price as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'document') ~> RawProducts",
				"source(output(",
				"          CustomerID as short,",
				"          Profile as (FirstName as string, LastName as string, Email as string),",
				"          Conversations as (ConversationID as string, Messages as (DateTime as timestamp, Message as string, Sender as string, SupportAgent as string)[])[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'document') ~> RawInteractions",
				"RawProducts cast(output(",
				"          Price as decimal(10,0)",
				"     ),",
				"     errors: true) ~> CastPriceDecimal",
				"SelectForSupportMessagesTable derive(SentByCustomer = iif(equalsIgnoreCase(\"Customer\",Sender), 1,0)) ~> MakeSentByCustomerCol",
				"RawInteractions foldDown(unroll(Conversations.Messages, Conversations),",
				"     mapColumn(",
				"          CustomerID,",
				"          ConvoID = Conversations.ConversationID,",
				"          AgentName = Conversations.Messages.SupportAgent,",
				"          Content = Conversations.Messages.Message,",
				"          Sender = Conversations.Messages.Sender,",
				"          TimeSent = Conversations.Messages.DateTime",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectForSupportMessagesTable",
				"MakeSentByCustomerCol cast(output(",
				"          CustomerID as integer",
				"     ),",
				"     errors: true) ~> CastAsIntegerID",
				"CastAsIntegerID filter(not(isNull(AgentName))) ~> ExcludeNullAgents",
				"CastPriceDecimal sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          ProductID as integer,",
				"          ProductName as string,",
				"          UnitPrice as decimal(10,2)",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ProductID,",
				"          ProductName,",
				"          UnitPrice = Price",
				"     )) ~> ToProducts",
				"CastAsIntegerID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          MessageID as integer,",
				"          ConvoID as string,",
				"          TimeSent as binary,",
				"          SentByCustomer as boolean,",
				"          Content as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'allErrors',",
				"     transactionCommit: 'single',",
				"     reportSuccessOnError: false,",
				"     mapColumn(",
				"          ConvoID,",
				"          Content",
				"     )) ~> ToMessages",
				"CastAsIntegerID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ConvoID as string,",
				"          CustomerID as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'allErrors',",
				"     transactionCommit: 'single',",
				"     reportSuccessOnError: false,",
				"     mapColumn(",
				"          ConvoID,",
				"          CustomerID = SentByCustomer",
				"     )) ~> ToConversations",
				"ExcludeNullAgents sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          MessageID as integer,",
				"          AgentName as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'allErrors',",
				"     transactionCommit: 'single',",
				"     reportSuccessOnError: false,",
				"     mapColumn(",
				"          AgentName",
				"     )) ~> ToSupportMessages"
			]
		}
	}
}