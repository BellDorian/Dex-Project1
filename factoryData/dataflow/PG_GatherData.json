{
	"name": "PG_GatherData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Orders_Raw",
						"type": "DatasetReference"
					},
					"name": "RawOrders"
				},
				{
					"dataset": {
						"referenceName": "OrderDetails_Raw",
						"type": "DatasetReference"
					},
					"name": "RawOrderDetails"
				},
				{
					"dataset": {
						"referenceName": "PaymentStatus",
						"type": "DatasetReference"
					},
					"name": "PaymentStatusTable"
				}
			],
			"sinks": [
				{
					"name": "ToOrderDetails",
					"description": "Insert into Warehouse"
				},
				{
					"dataset": {
						"referenceName": "Orders",
						"type": "DatasetReference"
					},
					"name": "ToOrders"
				}
			],
			"transformations": [
				{
					"name": "MakePriceDecimal",
					"description": "Convert Price to Decimal(10,2)"
				},
				{
					"name": "JoinDetails"
				},
				{
					"name": "AggregateOrderPrices"
				},
				{
					"name": "IngestPriceColumn",
					"description": "Add Aggregate Order Prices "
				},
				{
					"name": "IngestStatusCodeColumn"
				},
				{
					"name": "FinalCasting"
				}
			],
			"scriptLines": [
				"source(output(",
				"          orderid as integer,",
				"          customerid as integer,",
				"          orderdate as timestamp,",
				"          paymentstatus as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> RawOrders",
				"source(output(",
				"          orderdetailid as integer,",
				"          orderid as integer,",
				"          productid as integer,",
				"          quantity as integer,",
				"          price as decimal(10,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> RawOrderDetails",
				"source(output(",
				"          StatusCode as integer,",
				"          StatusMessage as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> PaymentStatusTable",
				"RawOrderDetails cast(output(",
				"          price as decimal(10,0)",
				"     ),",
				"     errors: true) ~> MakePriceDecimal",
				"RawOrders, AggregateOrderPrices join(RawOrders@orderid === AggregateOrderPrices@orderid,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinDetails",
				"MakePriceDecimal aggregate(groupBy(orderid),",
				"     price = sum(price)) ~> AggregateOrderPrices",
				"JoinDetails select(mapColumn(",
				"          OrderID = RawOrders@orderid,",
				"          CustomerID = customerid,",
				"          DateOrdered = orderdate,",
				"          StatusMessage = paymentstatus,",
				"          TotalPrice = AggregateOrderPrices@orderid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> IngestPriceColumn",
				"FinalCasting, PaymentStatusTable join(IngestPriceColumn@StatusMessage == PaymentStatusTable@StatusMessage,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> IngestStatusCodeColumn",
				"IngestPriceColumn cast(output(",
				"          DateOrdered as timestamp 'yyyy-MM-dd\\'T\\'HH:mm:ss',",
				"          TotalPrice as decimal(10,0)",
				"     ),",
				"     errors: true) ~> FinalCasting",
				"MakePriceDecimal sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          ComponentID = orderdetailid,",
				"          OrderID = orderid,",
				"          ProductID = productid,",
				"          Quantity = quantity,",
				"          ComponentPrice = price",
				"     )) ~> ToOrderDetails",
				"IngestStatusCodeColumn sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          OrderID as integer,",
				"          CustomerID as integer,",
				"          StatusCode as integer,",
				"          DateOrdered as timestamp,",
				"          TotalPrice as decimal(10,2)",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          OrderID,",
				"          CustomerID,",
				"          StatusCode,",
				"          DateOrdered,",
				"          TotalPrice",
				"     )) ~> ToOrders"
			]
		}
	}
}