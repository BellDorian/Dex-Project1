{
	"name": "CSV_GatherData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CustomerInfo",
						"type": "DatasetReference"
					},
					"name": "CSVRaw"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Customers",
						"type": "DatasetReference"
					},
					"name": "ToCustomers"
				},
				{
					"dataset": {
						"referenceName": "AlternateEmails",
						"type": "DatasetReference"
					},
					"name": "ToAlternateEmails"
				}
			],
			"transformations": [
				{
					"name": "window2"
				},
				{
					"name": "SplitEmails"
				},
				{
					"name": "SplitName",
					"description": "Splitting First, Last Name"
				},
				{
					"name": "TableAlternateEmails",
					"description": "Obtain the columns for this table"
				},
				{
					"name": "TableCustomers",
					"description": "This is all the columns needed for the warehouse table"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as integer,",
				"          Name as string,",
				"          Email as string,",
				"          Phone as string,",
				"          LastPurchaseDate as date,",
				"          TotalSpent as double",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CSVRaw",
				"derivedColumn1 window(over(CustomerID),",
				"     asc(LastPurchaseDate, true),",
				"     RowNumber = rowNumber(),",
				"     partitionBy('hash', 1)) ~> window2",
				"window2 split(RowNumber > 1,",
				"     disjoint: false) ~> SplitEmails@(ExtraEmail, PrimaryEmail)",
				"SplitEmails@PrimaryEmail derive(FirstName = split(Name,' ')[1],",
				"          Surname = split(Name,' ')[2]) ~> SplitName",
				"SplitEmails@ExtraEmail select(mapColumn(",
				"          CustomerID,",
				"          RowNumber,",
				"          EmailAddress = Email",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TableAlternateEmails",
				"SplitName select(mapColumn(",
				"          CustomerID,",
				"          FirstName,",
				"          Surname,",
				"          PrimaryEmail = Email,",
				"          Phone",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TableCustomers",
				"CSVRaw derive(Phone = substring(Phone, 1, 12)\r",
				") ~> derivedColumn1",
				"TableCustomers sink(allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     input(",
				"          CustomerID as integer,",
				"          FirstName as string,",
				"          Surname as string,",
				"          PrimaryEmail as string,",
				"          Phone as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> ToCustomers",
				"TableAlternateEmails sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          AltAddressID as integer,",
				"          CustomerID as integer,",
				"          EmailAddress as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> ToAlternateEmails"
			]
		}
	}
}